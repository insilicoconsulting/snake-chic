# Workflow for running the Arima Hi-C workflow in parallel

import os
from glob import glob

configfile: "config/config.yaml"

# required format: SAMPLE_[R1|R2].fastq.gz
fastq_files = glob("fastq/*.fastq.gz")

samples = [os.path.basename(s).rsplit("_", 1)[0] for s in fastq_files]

rule all:
    input:
        expand("results/{sample}/done.txt", sample=samples)


rule run_arima_hic:
    input:
        fq1 = "fastq/{sample}_R1.fastq.gz",
        fq2 = "fastq/{sample}_R2.fastq.gz"
    output:
        "results/{sample}/done.txt"
    conda:
        "envs/arima-hic.yml"
    threads: 16
    resources:
        mem_mb=30000,
        disk_mb=20000
    log:
        "logs/{sample}.log"
    params:
        arima_dir = config["arima_dir"],
        bowtie2_index_basename = config["bowtie2_index_basename"],
        genome_digest = config["genome_digest"],
        chicago_dir = config["chicago_dir"],
        capture_bed = config["capture_bed"],
        rmap = config["rmap"],
        baitmap = config["baitmap"],
        design_dir = config["design_dir"],
        organism = config["organism"],
        resolution = config["resolution"]
    shell: """
{params.arima_dir}/Arima-CHiC-v1.5.sh \
-A $CONDA_PREFIX/bin/bowtie2 \
-X {params.bowtie2_index_basename} \
-d {params.genome_digest} \
-H $CONDA_PREFIX/bin \
-C {params.chicago_dir} \
-I {input.fq1},{input.fq2} \
-o `dirname {output}` \
-p {wildcards.sample} \
-b {params.capture_bed} \
-R {params.rmap} \
-B {params.baitmap} \
-D {params.design_dir} \
-O {params.organism} \
-r {params.resolution} \
-t {threads} \
2>&1 > {log} \
&& \
touch {output}
"""
